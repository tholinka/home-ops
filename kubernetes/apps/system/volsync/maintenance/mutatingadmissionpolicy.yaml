---
# yaml-language-server: $schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.34.0/mutatingadmissionpolicybinding-admissionregistration-v1beta1.json
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingAdmissionPolicyBinding
metadata:
  name: kopia-maintenance-nfs
spec:
  policyName: kopia-maintenance-nfs
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.34.0/mutatingadmissionpolicy-admissionregistration-v1beta1.json
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingAdmissionPolicy
metadata:
  name: kopia-maintenance-nfs
spec:
  matchConstraints:
    resourceRules:
      - apiGroups:
          - batch
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - jobs
  matchConditions:
    - name: has-kopia-maint-job-name-prefix
      expression: >
        object.metadata.name.startsWith("kopia-maint-nfs-")
    - name: repository-volume-does-not-exist
      expression: >
        !has(object.spec.template.spec.volumes) ||
        !object.spec.template.spec.volumes.exists(item, item.name == "repository")
  failurePolicy: Fail
  reinvocationPolicy: IfNeeded
  mutations:
    - patchType: JSONPatch
      jsonPatch:
        # patches in order:
        # - don't run on rpi, as its very slow :)
        # - runAsUser: 0, as this is what the mover pods run as, so it's required to not have perm errors
        # - mount nfs as /repository
        expression: >-
          [
            JSONPatch{
              op: "add", path: "/spec/template/spec/nodeSelector",
              value: Object.spec.template.spec.nodeSelector{}
            },
            JSONPatch{
              op: "add", path: "/spec/template/spec/nodeSelector/kubernetes.io~1arch",
              value: "amd64"
            },
            JSONPatch{
              op: "replace", path: "/spec/containers/0/securityContext/runAsUser",
              value: 0
            },
            JSONPatch{
              op: "add", path: "/spec/template/spec/volumes/-",
              value: Object.spec.template.spec.volumes{
                name: "repository",
                nfs: Object.spec.template.spec.volumes.nfs{
                  server: "nas.servers.internal",
                  path: "/backups/VolsyncKopia"
                }
              }
            },
            JSONPatch{
              op: "add", path: "/spec/template/spec/containers/0/volumeMounts/-",
              value: Object.spec.template.spec.containers.volumeMounts{
                name: "repository",
                mountPath: "/repository"
              }
            }
          ]
