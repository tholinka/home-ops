---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app pgadmin
  namespace: databases
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  driftDetection:
    mode: enabled
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    defaultPodOptions:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 5050
        runAsGroup: 5050
        fsGroup: 5050
        fsGroupChangePolicy: OnRootMismatch

    controllers:
      *app :
        annotations:
          reloader.stakater.com/auto: 'true'

        initContainers:
          init:
            image: &image
              repository: docker.io/dpage/pgadmin4
              tag: 9.3.0@sha256:bd71932cb1ef94719e783f0eed42c227bc67877a7c7e076c7092738711e5f4d4
            command: # pgadmin only creates the per-user .pgpass when the user is first created, so this manually updates it
              - /bin/sh
              - -c
              - >-
                for i in "/var/lib/pgadmin/storage"/*/; do
                  if [ -d "$i" ]; then
                    cp /pgadmin4/pgpass "$i/.pgpass";
                    chown 5050:5050 "$i/.pgpass";
                    chmod 500 "$i/.pgpass";
                  fi;
                done
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
              runAsGroup: 0
              fsGroup: 0
        containers:
          main:
            image: *image
            env:
              PGADMIN_DISABLE_POSTFIX: 'True'
              PGADMIN_LISTEN_PORT: &port 80
              PGADMIN_REPLACE_SERVERS_ON_STARTUP: 'True'
              PGADMIN_CONFIG_SERVER_MODE: 'True'
              PGPASS_FILE: &pgpass /pgadmin4/pgpass
              PGADMIN_DEFAULT_EMAIL:
                valueFrom:
                  secretKeyRef:
                    name: *app
                    key: PGADMIN_DEFAULT_EMAIL
              PGADMIN_DEFAULT_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *app
                    key: PGADMIN_DEFAULT_PASSWORD
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /misc/ping
                    port: *port
                  failureThreshold: 10
              readiness: *probes
              startup: *probes
            resources:
              requests:
                cpu: 50m
                memory: 100Mi
              limits:
                memory: 500Mi

    service:
      main:
        controller: *app
        ports:
          http:
            port: *port

    route:
      app:
        hostnames:
          - pg.${SECRET_DOMAIN}
        parentRefs:
          - name: internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port
        annotations:
          gethomepage.dev/enabled: 'true'
          gethomepage.dev/group: Infrastructure
          gethomepage.dev/name: pgAdmin
          gethomepage.dev/icon: pgadmin.svc
          gethomepage.dev/siteMonitor: http://pgadmin.database.svc.cluster.local

    persistence:
      config:
        existingClaim: *app
        globalMounts:
          - path: /var/lib/pgadmin
      oauth:
        type: secret
        name: *app
        globalMounts:
          - path: /pgadmin4/config_local.py
            subPath: config_local.py
            readOnly: true
          - path: *pgpass
            subPath: pgpass
            readOnly: true
          - path: /pgadmin4/servers.json
            subPath: servers.json
            readOnly: true
