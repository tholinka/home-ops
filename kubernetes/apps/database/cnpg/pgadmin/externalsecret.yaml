---
# yaml-language-server: $schema=https://schemas.tholinka.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name pgadmin
spec:
  refreshInterval: 5m
  secretStoreRef:
    kind: ClusterSecretStore
    name: bitwarden
  target:
    name: *name
    creationPolicy: Owner
    template:
      data:
        PGADMIN_DEFAULT_EMAIL: '{{ .PGADMIN_DEFAULT_EMAIL }}'
        PGADMIN_DEFAULT_PASSWORD: '{{ .PGADMIN_DEFAULT_PASSWORD }}'
        config_local.py: |
          AUTHENTICATION_SOURCES = ['oauth2'] #, 'internal']
          OAUTH2_AUTO_CREATE_USER = True
          MASTER_PASSWORD_REQUIRED = False
          OAUTH2_CONFIG = [{
              'OAUTH2_NAME' : 'authentik',
              'OAUTH2_DISPLAY_NAME' : 'Authentik',
              'OAUTH2_CLIENT_ID' : '{{ .PGADMIN_CLIENT_ID }}',
              'OAUTH2_CLIENT_SECRET' : '{{ .PGADMIN_CLIENT_SECRET }}',
              'OAUTH2_TOKEN_URL' : 'https://auth.${SECRET_DOMAIN}/application/o/token/',
              'OAUTH2_AUTHORIZATION_URL' : 'https://auth.${SECRET_DOMAIN}/application/o/authorize/',
              'OAUTH2_API_BASE_URL' : 'https://auth.${SECRET_DOMAIN}/',
              'OAUTH2_USERINFO_ENDPOINT' : 'https://auth.${SECRET_DOMAIN}/application/o/userinfo/',
              'OAUTH2_SERVER_METADATA_URL' : 'https://auth.${SECRET_DOMAIN}/application/o/pgadmin/.well-known/openid-configuration',
              'OAUTH2_SCOPE' : 'openid email profile',
              'OAUTH2_ICON' : 'fa-openid',
              'OAUTH2_BUTTON_COLOR' : '#2db1fd'
          }]
        pgpass: |
          postgres-ferretdb-rw.database.svc.cluster.local:*:*:postgres:{{ .FERRETDB_POSTGRES_PASS }}
          *:*:*:{{ .POSTGRES_SUPER_USER }}:{{ .POSTGRES_SUPER_PASS }}
        servers.json: |
          {
            "Servers": {
              "1": {
                "Name": "postgres-cluster",
                "Group": "Servers",
                "Host": "postgres-cluster-rw.database.svc.cluster.local",
                "Port": 5432,
                "Shared": true,
                "MaintenanceDB": "postgres",
                "Username": "{{ .POSTGRES_SUPER_USER }}",
                "SharedUsername": "{{ .POSTGRES_SUPER_USER }}",
                "ConnectionParameters": {
                  "passfile": ".pgpass",
                  "sslmode": "prefer"
                },
                "SSLCompression": 0,
                "Timeout": 10,
                "UseSSHTunnel": 0,
                "TunnelPort": "22",
                "TunnelAuthentication": 0
              },
              "2": {
                "Name": "postgres-immich",
                "Group": "Servers",
                "Host": "postgres-immich-rw.self-hosted.svc.cluster.local",
                "Port": 5432,
                "Shared": true,
                "MaintenanceDB": "postgres",
                "Username": "{{ .POSTGRES_SUPER_USER }}",
                "SharedUsername": "{{ .POSTGRES_SUPER_USER }}",
                "ConnectionParameters": {
                  "passfile": ".pgpass",
                  "sslmode": "prefer"
                },
                "SSLCompression": 0,
                "Timeout": 10,
                "UseSSHTunnel": 0,
                "TunnelPort": "22",
                "TunnelAuthentication": 0
              },
              "3": {
                "Name": "postgres-ferretdb",
                "Group": "Servers",
                "Host": "postgres-ferretdb-rw.database.svc.cluster.local",
                "Port": 5432,
                "Shared": true,
                "MaintenanceDB": "postgres",
                "Username": "postgres",
                "SharedUsername": "postgres",
                "ConnectionParameters": {
                  "passfile": ".pgpass",
                  "sslmode": "prefer"
                },
                "SSLCompression": 0,
                "Timeout": 10,
                "UseSSHTunnel": 0,
                "TunnelPort": "22",
                "TunnelAuthentication": 0
              }
            }
          }

  dataFrom:
    - extract:
        key: *name
    - extract:
        key: ferretdb
    - extract:
        key: cloudnative_pg
